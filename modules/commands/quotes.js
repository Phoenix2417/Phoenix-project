module.exports.config = {
  name: "quotes",
  version: "1.0.0",
  hasPermssion: 2,
  credits: "Trae AI",
  description: "T·ª± ƒë·ªông g·ª≠i tin nh·∫Øn v·ªõi nh·ªØng c√¢u n√≥i hay m·ªói 4 ti·∫øng m·ªôt l·∫ßn",
  commandCategory: "Ti·ªán √≠ch",
  usages: "[add/remove/list] [threadID]",
  cooldowns: 5,
  dependencies: {
    "fs-extra": "",
    "moment-timezone": ""
  }
};

const fs = require("fs-extra");
const path = require("path");
const moment = require("moment-timezone");

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file l∆∞u tr·ªØ d·ªØ li·ªáu
const dataPath = path.resolve(__dirname, 'data', "quotes.json");

// Danh s√°ch c√°c c√¢u n√≥i hay
const inspirationalQuotes = [
  "H√£y l√† phi√™n b·∫£n t·ªët nh·∫•t c·ªßa ch√≠nh m√¨nh, kh√¥ng ph·∫£i b·∫£n sao c·ªßa ng∆∞·ªùi kh√°c.",
  "Th√†nh c√¥ng kh√¥ng ph·∫£i l√† ƒë√≠ch ƒë·∫øn, m√† l√† c·∫£ m·ªôt h√†nh tr√¨nh.",
  "ƒê·ª´ng so s√°nh b·∫£n th√¢n v·ªõi ng∆∞·ªùi kh√°c. H√£y so s√°nh v·ªõi ch√≠nh m√¨nh c·ªßa ng√†y h√¥m qua.",
  "N·∫øu l·ªãch s·ª≠ v√† khoa h·ªçc ƒë√£ d·∫°y ch√∫ng ta ƒëi·ªÅu g√¨, th√¨ ƒë√≥ l√† ni·ªÅm tin v√† t√¨m t√≤i nh·ªØng th·ª© tr√¥ng kh√¥ng gi·ªëng nh∆∞ s·ª± th·∫≠t. (EO Wilson)",
  "Th·∫•t b·∫°i kh√¥ng ph·∫£i l√† ng√£ xu·ªëng m√† l√† kh√¥ng ch·ªãu ƒë·ª©ng d·∫≠y.",
  "ƒê·ª´ng ƒë·ªÉ ng√†y h√¥m qua chi·∫øm qu√° nhi·ªÅu th·ªùi gian c·ªßa ng√†y h√¥m nay.",
  "H√£y ƒë·ªëi x·ª≠ v·ªõi b·∫£n th√¢n nh∆∞ c√°ch b·∫°n mu·ªën ng∆∞·ªùi kh√°c ƒë·ªëi x·ª≠ v·ªõi b·∫°n.",
  "Cu·ªôc s·ªëng kh√¥ng ph·∫£i l√† v·∫•n ƒë·ªÅ c·∫ßn ƒë∆∞·ª£c gi·∫£i quy·∫øt, m√† l√† th·ª±c t·∫ø ƒë·ªÉ tr·∫£i nghi·ªám.",
  "H√£y l√†m ƒëi·ªÅu b·∫°n s·ª£ h√£i, v√† n·ªói s·ª£ h√£i s·∫Ω bi·∫øn m·∫•t.",
  "Th√†nh c√¥ng l√† ƒëi t·ª´ th·∫•t b·∫°i n√†y ƒë·∫øn th·∫•t b·∫°i kh√°c m√† kh√¥ng m·∫•t ƒëi nhi·ªát huy·∫øt.",
  "H√£y s·ªëng cu·ªôc ƒë·ªùi c·ªßa b·∫°n theo c√°ch m√† khi nh√¨n l·∫°i, b·∫°n s·∫Ω kh√¥ng h·ªëi ti·∫øc.",
  "ƒê·ª´ng ch·ªù ƒë·ª£i c∆° h·ªôi, h√£y t·∫°o ra n√≥.",
  "H·∫°nh ph√∫c kh√¥ng ph·∫£i l√† ƒë√≠ch ƒë·∫øn, m√† l√† c√°ch b·∫°n ƒëi.",
  "ƒê·ª´ng ƒë·ªÉ ∆∞·ªõc m∆° ch·ªâ l√† ∆∞·ªõc m∆°. H√£y ƒë·∫∑t m·ª•c ti√™u, k·∫ø ho·∫°ch v√† th·ª±c hi·ªán.",
  "Th·ªùi gian v√† s·ª©c kh·ªèe l√† hai t√†i s·∫£n qu√Ω gi√° m√† ch√∫ng ta kh√¥ng nh·∫≠n ra cho ƒë·∫øn khi ch√∫ng m·∫•t ƒëi.",
  "Th√†nh c√¥ng kh√¥ng ƒë·∫øn t·ª´ nh·ªØng g√¨ b·∫°n l√†m th·ªânh tho·∫£ng. N√≥ ƒë·∫øn t·ª´ nh·ªØng g√¨ b·∫°n l√†m m·ªôt c√°ch nh·∫•t qu√°n.",
  "ƒê·ª´ng ƒë·ª£i ƒë·∫øn ng√†y mai nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m h√¥m nay.",
  "H√£y l√† s·ª± thay ƒë·ªïi m√† b·∫°n mu·ªën th·∫•y ·ªü th·∫ø gi·ªõi n√†y.",
  "Kh√¥ng c√≥ g√¨ l√† kh√¥ng th·ªÉ v·ªõi ng∆∞·ªùi lu√¥n c·ªë g·∫Øng.",
  "Cu·ªôc s·ªëng b·∫Øt ƒë·∫ßu ·ªü n∆°i v√πng an to√†n c·ªßa b·∫°n k·∫øt th√∫c."
];

// Kh·ªüi t·∫°o d·ªØ li·ªáu n·∫øu ch∆∞a t·ªìn t·∫°i
function initData() {
  if (!fs.existsSync(dataPath)) {
    fs.writeFileSync(dataPath, JSON.stringify({
      threads: [],
      lastSent: {} // Th√™m ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ theo d√µi l·∫ßn g·ª≠i cu·ªëi c√πng
    }), "utf-8");
  }
  return JSON.parse(fs.readFileSync(dataPath, "utf-8"));
}

// L∆∞u d·ªØ li·ªáu
function saveData(data) {
  fs.writeFileSync(dataPath, JSON.stringify(data, null, 4), "utf-8");
}

// Th√™m thread v√†o danh s√°ch nh·∫≠n th√¥ng b√°o
function addThread(threadID) {
  const data = initData();
  if (data.threads.includes(threadID)) return false;
  data.threads.push(threadID);
  saveData(data);
  return true;
}

// X√≥a thread kh·ªèi danh s√°ch nh·∫≠n th√¥ng b√°o
function removeThread(threadID) {
  const data = initData();
  if (!data.threads.includes(threadID)) return false;
  data.threads = data.threads.filter(id => id !== threadID);
  saveData(data);
  return true;
}

// L·∫•y danh s√°ch thread ƒëang nh·∫≠n th√¥ng b√°o
function getThreads() {
  const data = initData();
  return data.threads;
}

// L·∫•y m·ªôt c√¢u n√≥i ng·∫´u nhi√™n
function getRandomQuote() {
  return inspirationalQuotes[Math.floor(Math.random() * inspirationalQuotes.length)];
}

// Kh·ªüi t·∫°o interval khi load module
module.exports.onLoad = function ({ api }) {
  // ƒê·∫£m b·∫£o th∆∞ m·ª•c data t·ªìn t·∫°i
  if (!fs.existsSync(path.resolve(__dirname, 'data'))) {
    fs.mkdirSync(path.resolve(__dirname, 'data'));
  }
  
  // Kh·ªüi t·∫°o d·ªØ li·ªáu
  initData();
  
  // Thi·∫øt l·∫≠p interval ƒë·ªÉ g·ª≠i tin nh·∫Øn m·ªói 4 ti·∫øng
  if (!global.quotesInterval) {
    global.quotesInterval = setInterval(async function () {
      const threads = getThreads();
      if (threads.length === 0) return;
      
      // Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i
      const now = moment().tz('Asia/Ho_Chi_Minh');
      const hour = now.hour();
      const minute = now.minute();
      const second = now.second();
      const currentDate = now.format('YYYY-MM-DD');
      
      // Ch·ªâ g·ª≠i tin nh·∫Øn v√†o c√°c gi·ªù: 0, 4, 8, 12, 16, 20 v√† ƒë√∫ng ph√∫t th·ª© 0
      if (hour % 4 === 0 && minute === 0 && second < 5) {
        // L·∫•y d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra l·∫ßn g·ª≠i cu·ªëi
        const data = initData();
        const timeKey = `${currentDate}-${hour}`;
        
        // Ki·ªÉm tra xem ƒë√£ g·ª≠i tin nh·∫Øn cho gi·ªù n√†y ch∆∞a
        if (data.lastSent && data.lastSent[timeKey]) {
          console.log(`[QUOTES] ƒê√£ g·ª≠i tin nh·∫Øn cho khung gi·ªù ${hour}:00 ng√†y ${currentDate}, b·ªè qua.`);
          return;
        }
        
        console.log(`[QUOTES] ƒêang g·ª≠i quotes ƒë·∫øn ${threads.length} nh√≥m v√†o l√∫c ${now.format('HH:mm:ss')}`);
        const quote = getRandomQuote();
        
        // G·ª≠i tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ c√°c nh√≥m ƒë√£ ƒëƒÉng k√Ω
        for (const threadID of threads) {
          try {
            await api.sendMessage({
              body: `üìå Nh·∫Øc nh·ªü c√°c b·∫°n tr·∫ª:\n\n${quote}`,
            }, threadID);
            console.log(`[QUOTES] ƒê√£ g·ª≠i quotes ƒë·∫øn nh√≥m ${threadID}`);
            // Th√™m delay gi·ªØa c√°c l·∫ßn g·ª≠i tin nh·∫Øn ƒë·ªÉ tr√°nh b·ªã gi·ªõi h·∫°n
            await new Promise(resolve => setTimeout(resolve, 300));
          } catch (error) {
            console.error(`[QUOTES] Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m ${threadID}:`, error);
          }
        }
        
        // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i cu·ªëi c√πng
        data.lastSent[timeKey] = now.format('HH:mm:ss');
        saveData(data);
        
        // X√≥a c√°c b·∫£n ghi c≈© (gi·ªØ l·∫°i 7 ng√†y g·∫ßn nh·∫•t)
        const keysToKeep = Object.keys(data.lastSent).filter(key => {
          const keyDate = key.split('-')[0];
          const dateDiff = moment(currentDate).diff(moment(keyDate), 'days');
          return dateDiff <= 7;
        });
        
        const newLastSent = {};
        keysToKeep.forEach(key => {
          newLastSent[key] = data.lastSent[key];
        });
        
        data.lastSent = newLastSent;
        saveData(data);
      }
    }, 5000); // Gi·ªØ nguy√™n 5 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªè l·ª° th·ªùi ƒëi·ªÉm g·ª≠i
  }
};

// Th√™m h√†m ƒë·ªÉ ki·ªÉm tra th·ªùi gian g·ª≠i tin nh·∫Øn ti·∫øp theo
function getNextSendTime() {
  const now = moment().tz('Asia/Ho_Chi_Minh');
  const currentHour = now.hour();
  const nextHour = Math.ceil(currentHour / 4) * 4;
  const nextTime = moment().tz('Asia/Ho_Chi_Minh').hour(nextHour % 24).minute(0).second(0);
  
  if (nextHour <= currentHour) {
    nextTime.add(4, 'hours');
  }
  
  return nextTime.format('HH:mm:ss DD/MM/YYYY');
}

module.exports.run = async function ({ api, event, args }) {
  const { threadID, messageID, senderID } = event;
  
  if (!args[0]) {
    return api.sendMessage(
      `===== [ QUOTES ] =====\n\n` +
      `S·ª≠ d·ª•ng:\n` +
      `- quotes add: Th√™m nh√≥m hi·ªán t·∫°i v√†o danh s√°ch nh·∫≠n th√¥ng b√°o\n` +
      `- quotes remove: X√≥a nh√≥m hi·ªán t·∫°i kh·ªèi danh s√°ch nh·∫≠n th√¥ng b√°o\n` +
      `- quotes list: Xem danh s√°ch c√°c nh√≥m ƒëang nh·∫≠n th√¥ng b√°o\n` +
      `- quotes test: G·ª≠i m·ªôt c√¢u n√≥i ng·∫´u nhi√™n ƒë·ªÉ ki·ªÉm tra\n\n` +
      `L∆∞u √Ω: Bot s·∫Ω t·ª± ƒë·ªông g·ª≠i c√¢u n√≥i hay m·ªói 4 ti·∫øng m·ªôt l·∫ßn (v√†o c√°c gi·ªù: 0h, 4h, 8h, 12h, 16h, 20h)`,
      threadID, messageID
    );
  }
  
  switch (args[0].toLowerCase()) {
    case "add": {
      const success = addThread(threadID);
      if (success) {
        const nextTime = getNextSendTime();
        return api.sendMessage(
          `‚úÖ ƒê√£ th√™m nh√≥m n√†y v√†o danh s√°ch nh·∫≠n th√¥ng b√°o c√¢u n√≥i hay m·ªói 4 ti·∫øng.\nL·∫ßn g·ª≠i ti·∫øp theo s·∫Ω l√† v√†o l√∫c: ${nextTime}`,
          threadID, messageID
        );
      } else {
        return api.sendMessage(
          "‚ùé Nh√≥m n√†y ƒë√£ c√≥ trong danh s√°ch nh·∫≠n th√¥ng b√°o.",
          threadID, messageID
        );
      }
    }
    
    case "remove": {
      const success = removeThread(threadID);
      if (success) {
        return api.sendMessage(
          "‚úÖ ƒê√£ x√≥a nh√≥m n√†y kh·ªèi danh s√°ch nh·∫≠n th√¥ng b√°o.",
          threadID, messageID
        );
      } else {
        return api.sendMessage(
          "‚ùé Nh√≥m n√†y kh√¥ng c√≥ trong danh s√°ch nh·∫≠n th√¥ng b√°o.",
          threadID, messageID
        );
      }
    }
    
    case "list": {
      const threads = getThreads();
      if (threads.length === 0) {
        return api.sendMessage(
          "‚ùé Ch∆∞a c√≥ nh√≥m n√†o trong danh s√°ch nh·∫≠n th√¥ng b√°o.",
          threadID, messageID
        );
      } else {
        return api.sendMessage(
          `üìã Danh s√°ch c√°c nh√≥m ƒëang nh·∫≠n th√¥ng b√°o (${threads.length} nh√≥m):\n${threads.join("\n")}`,
          threadID, messageID
        );
      }
    }
    
    case "test": {
      const quote = getRandomQuote();
      return api.sendMessage(
        `üìå Nh·∫Øc nh·ªü c√°c b·∫°n tr·∫ª:\n\n${quote}`,
        threadID, messageID
      );
    }
    
    default: {
      return api.sendMessage(
        "‚ùé L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: quotes [add/remove/list/test]",
        threadID, messageID
      );
    }
  }
};
