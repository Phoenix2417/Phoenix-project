module.exports.config = {
    name: "antispam",
    version: "1.1.0",
    hasPermssion: 1,
    credits: "Original by YourName - Modified for Mirai by Claude",
    description: "H·ªá th·ªëng ch·ªëng spam tin nh·∫Øn n√¢ng cao",
    commandCategory: "system",
    usages: "[on/off/set/exempt/status]",
    cooldowns: 5,
    envConfig: {}
};

const fs = require('fs');
const path = require('path');

// L·ªõp qu·∫£n l√Ω ch·ªëng spam
class AntiSpamManager {
    constructor() {
        this.userDataMap = new Map();
        this.configPath = path.join(__dirname, '../includes/antispam_config.json');
        this.defaultConfig = {
            enabled: true,
            threshold: 5,
            timeWindow: 10000,
            action: 'warn',
            exemptUsers: [],
            exemptAdmins: true
        };
        this.config = this.loadConfig();
    }

    loadConfig() {
        try {
            if (!fs.existsSync(this.configPath)) {
                const dirPath = path.dirname(this.configPath);
                if (!fs.existsSync(dirPath)) {
                    fs.mkdirSync(dirPath, { recursive: true });
                }
                fs.writeFileSync(this.configPath, JSON.stringify(this.defaultConfig, null, 2));
                return this.defaultConfig;
            }
            return JSON.parse(fs.readFileSync(this.configPath, 'utf8'));
        } catch (error) {
            console.error('ANTISPAM CONFIG ERROR:', error);
            return this.defaultConfig;
        }
    }

    saveConfig() {
        try {
            fs.writeFileSync(this.configPath, JSON.stringify(this.config, null, 2));
        } catch (error) {
            console.error('ANTISPAM SAVE CONFIG ERROR:', error);
        }
    }

    checkSpam(userId, isAdmin = false) {
        if (!this.config.enabled) return false;
        if (isAdmin && this.config.exemptAdmins) return false;
        if (this.config.exemptUsers.includes(userId)) return false;

        const currentTime = Date.now();
        const userData = this.userDataMap.get(userId) || {
            count: 0,
            lastTime: 0
        };

        // Reset n·∫øu ƒë√£ qua kho·∫£ng th·ªùi gian quy ƒë·ªãnh
        if (currentTime - userData.lastTime > this.config.timeWindow) {
            userData.count = 1;
            userData.lastTime = currentTime;
            this.userDataMap.set(userId, userData);
            return false;
        }

        userData.count++;
        userData.lastTime = currentTime;
        this.userDataMap.set(userId, userData);

        // Ki·ªÉm tra v∆∞·ª£t ng∆∞·ª°ng
        if (userData.count >= this.config.threshold) {
            return true;
        }

        return false;
    }

    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        this.saveConfig();
    }

    resetUser(userId) {
        this.userDataMap.delete(userId);
    }

    resetAllUsers() {
        this.userDataMap.clear();
    }
}

const spamManager = new AntiSpamManager();

module.exports.onLoad = async function() {
    console.log('=== ANTISPAM MODULE LOADED ===');
};

module.exports.handleEvent = async function({ api, event, Users, Threads }) {
    try {
        if (event.type !== "message" && event.type !== "message_reply") return;
        
        const { senderID, threadID } = event;
        
        // B·ªè qua tin nh·∫Øn c·ªßa bot
        const botID = api.getCurrentUserID();
        if (senderID === botID) return;
        
        // Ki·ªÉm tra quy·ªÅn admin
        let isAdmin = false;
        try {
            const threadInfo = await api.getThreadInfo(threadID);
            isAdmin = threadInfo.adminIDs.some(admin => admin.id === senderID);
        } catch (err) {
            console.error("Error getting thread info:", err);
        }

        if (spamManager.checkSpam(senderID, isAdmin)) {
            switch (spamManager.config.action) {
                case 'warn':
                    await api.sendMessage({
                        body: `‚ö†Ô∏è @${senderID} ƒëang g·ª≠i tin nh·∫Øn qu√° nhanh! Vui l√≤ng ch·ªù ${spamManager.config.timeWindow/1000} gi√¢y.`,
                        mentions: [{
                            tag: `@${senderID}`,
                            id: senderID
                        }]
                    }, threadID);
                    
                    // Reset sau khi ƒë√£ c·∫£nh b√°o
                    spamManager.resetUser(senderID);
                    break;
                    
                case 'kick':
                    try {
                        await api.removeUserFromGroup(senderID, threadID);
                        await api.sendMessage({
                            body: `üö´ ƒê√£ kick @${senderID} do spam tin nh·∫Øn.`,
                            mentions: [{
                                tag: `@${senderID}`,
                                id: senderID
                            }]
                        }, threadID);
                    } catch (err) {
                        api.sendMessage("‚ùå Bot kh√¥ng c√≥ quy·ªÅn kick th√†nh vi√™n ho·∫∑c ƒë√£ x·∫£y ra l·ªói!", threadID);
                    }
                    break;
                    
                case 'mute':
                    // L∆∞u th√¥ng tin ng∆∞·ªùi b·ªã mute
                    global.moduleData.antispam = global.moduleData.antispam || {};
                    global.moduleData.antispam.mutedUsers = global.moduleData.antispam.mutedUsers || {};
                    global.moduleData.antispam.mutedUsers[senderID] = Date.now() + 60000; // Mute 1 ph√∫t
                    
                    await api.sendMessage({
                        body: `üîá @${senderID} b·ªã mute 1 ph√∫t do spam tin nh·∫Øn.`,
                        mentions: [{
                            tag: `@${senderID}`,
                            id: senderID
                        }]
                    }, threadID);
                    break;
            }
            return false;
        }
        
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang b·ªã mute kh√¥ng
        if (global.moduleData.antispam && 
            global.moduleData.antispam.mutedUsers && 
            global.moduleData.antispam.mutedUsers[senderID]) {
            
            const muteEndTime = global.moduleData.antispam.mutedUsers[senderID];
            if (Date.now() < muteEndTime) {
                // N·∫øu c√≤n th·ªùi gian mute, x√≥a tin nh·∫Øn
                api.unsendMessage(event.messageID);
                return false;
            } else {
                // H·∫øt th·ªùi gian mute, x√≥a kh·ªèi danh s√°ch
                delete global.moduleData.antispam.mutedUsers[senderID];
            }
        }
    } catch (error) {
        console.error('ANTISPAM EVENT ERROR:', error);
    }
    return true;
};

module.exports.run = async function({ api, event, args, Users, Threads }) {
    try {
        const { threadID, senderID, messageID } = event;
        
        // Ki·ªÉm tra quy·ªÅn admin nh√≥m
        let isThreadAdmin = false;
        try {
            const threadInfo = await api.getThreadInfo(threadID);
            isThreadAdmin = threadInfo.adminIDs.some(admin => admin.id === senderID);
        } catch (err) {
            console.error("Error getting thread info:", err);
        }
        
        // N·∫øu kh√¥ng ph·∫£i admin nh√≥m v√† kh√¥ng c√≥ quy·ªÅn trong bot
        if (!isThreadAdmin && event.hasPermssion < 1) {
            return api.sendMessage("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", threadID, messageID);
        }

        const command = args[0]?.toLowerCase();

        if (!command) {
            return this.showHelp(api, threadID, messageID);
        }

        switch (command) {
            case 'on':
                spamManager.updateConfig({ enabled: true });
                return api.sendMessage("‚úÖ ƒê√£ b·∫≠t h·ªá th·ªëng ch·ªëng spam", threadID, messageID);

            case 'off':
                spamManager.updateConfig({ enabled: false });
                return api.sendMessage("‚úÖ ƒê√£ t·∫Øt h·ªá th·ªëng ch·ªëng spam", threadID, messageID);

            case 'set':
                return this.handleSetCommand(api, event, args.slice(1));

            case 'exempt':
                return this.handleExemptCommand(api, event, args.slice(1));

            case 'status':
                return this.showStatus(api, threadID, messageID);
                
            case 'reset':
                if (args[1]) {
                    spamManager.resetUser(args[1]);
                    return api.sendMessage(`‚úÖ ƒê√£ reset tr·∫°ng th√°i spam cho ng∆∞·ªùi d√πng ${args[1]}`, threadID, messageID);
                } else {
                    spamManager.resetAllUsers();
                    return api.sendMessage("‚úÖ ƒê√£ reset tr·∫°ng th√°i spam cho t·∫•t c·∫£ ng∆∞·ªùi d√πng", threadID, messageID);
                }

            case 'admin':
                if (args[1]?.toLowerCase() === 'exempt') {
                    const status = args[2]?.toLowerCase() === 'on' ? true : false;
                    spamManager.updateConfig({ exemptAdmins: status });
                    return api.sendMessage(
                        `‚úÖ ƒê√£ ${status ? 'b·∫≠t' : 't·∫Øt'} ch·∫ø ƒë·ªô mi·ªÖn tr·ª´ admin kh·ªèi ki·ªÉm tra spam`,
                        threadID, messageID
                    );
                }
                return this.showHelp(api, threadID, messageID);

            default:
                return this.showHelp(api, threadID, messageID);
        }
    } catch (error) {
        console.error('ANTISPAM COMMAND ERROR:', error);
        return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh!", event.threadID, event.messageID);
    }
};

module.exports.handleSetCommand = async function(api, event, args) {
    const { threadID, messageID } = event;
    
    if (args.length < 3) {
        return api.sendMessage(
            "‚ö†Ô∏è Thi·∫øu tham s·ªë!\n" +
            "C√∫ ph√°p: antispam set [s·ªë_tin] [th·ªùi_gian(s)] [h√†nh_ƒë·ªông]\n" +
            "V√≠ d·ª•: antispam set 5 10 warn",
            threadID, messageID
        );
    }

    const [threshold, timeWindow, action] = args;
    const numThreshold = parseInt(threshold);
    const numTimeWindow = parseInt(timeWindow) * 1000;

    if (isNaN(numThreshold) || isNaN(numTimeWindow) || numThreshold <= 0 || numTimeWindow <= 0) {
        return api.sendMessage("‚ùå Gi√° tr·ªã s·ªë tin v√† th·ªùi gian ph·∫£i l√† s·ªë d∆∞∆°ng!", threadID, messageID);
    }

    if (!['warn', 'kick', 'mute'].includes(action.toLowerCase())) {
        return api.sendMessage("‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá! Ch·ªçn warn/kick/mute", threadID, messageID);
    }

    spamManager.updateConfig({
        threshold: numThreshold,
        timeWindow: numTimeWindow,
        action: action.toLowerCase()
    });

    return api.sendMessage(
        `‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh ch·ªëng spam:\n` +
        `- S·ªë tin nh·∫Øn t·ªëi ƒëa: ${numThreshold} tin\n` +
        `- Kho·∫£ng th·ªùi gian: ${numTimeWindow/1000} gi√¢y\n` +
        `- H√†nh ƒë·ªông khi ph√°t hi·ªán spam: ${this.getActionName(action.toLowerCase())}`,
        threadID, messageID
    );
};

module.exports.handleExemptCommand = async function(api, event, args) {
    const { threadID, messageID } = event;
    
    if (args.length < 2) {
        return api.sendMessage(
            "‚ö†Ô∏è Thi·∫øu tham s·ªë!\n" +
            "C√∫ ph√°p: antispam exempt [add/remove] [userID]\n" +
            "V√≠ d·ª•: antispam exempt add 123456789",
            threadID, messageID
        );
    }

    const [action, userID] = args;
    const exemptUsers = [...spamManager.config.exemptUsers];

    if (action === 'add') {
        if (exemptUsers.includes(userID)) {
            return api.sendMessage("‚ÑπÔ∏è Ng∆∞·ªùi d√πng ƒë√£ c√≥ trong danh s√°ch mi·ªÖn tr·ª´", threadID, messageID);
        }
        exemptUsers.push(userID);
    } else if (action === 'remove') {
        const index = exemptUsers.indexOf(userID);
        if (index === -1) {
            return api.sendMessage("‚ÑπÔ∏è Ng∆∞·ªùi d√πng kh√¥ng c√≥ trong danh s√°ch mi·ªÖn tr·ª´", threadID, messageID);
        }
        exemptUsers.splice(index, 1);
    } else {
        return api.sendMessage("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng add ho·∫∑c remove", threadID, messageID);
    }

    spamManager.updateConfig({ exemptUsers });
    return api.sendMessage(
        `‚úÖ ƒê√£ ${action === 'add' ? 'th√™m' : 'x√≥a'} ng∆∞·ªùi d√πng ${userID} ${action === 'add' ? 'v√†o' : 'kh·ªèi'} danh s√°ch mi·ªÖn tr·ª´`,
        threadID, messageID
    );
};

module.exports.showStatus = async function(api, threadID, messageID) {
    const config = spamManager.config;
    return api.sendMessage(
        `üîç Tr·∫°ng th√°i h·ªá th·ªëng ch·ªëng spam:\n\n` +
        `‚Ä¢ Tr·∫°ng th√°i: ${config.enabled ? 'üü¢ B·∫¨T' : 'üî¥ T·∫ÆT'}\n` +
        `‚Ä¢ S·ªë tin t·ªëi ƒëa: ${config.threshold} tin\n` +
        `‚Ä¢ Kho·∫£ng th·ªùi gian: ${config.timeWindow/1000} gi√¢y\n` +
        `‚Ä¢ H√†nh ƒë·ªông: ${this.getActionName(config.action)}\n` +
        `‚Ä¢ Mi·ªÖn tr·ª´ admin: ${config.exemptAdmins ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}\n` +
        `‚Ä¢ S·ªë ng∆∞·ªùi d√πng ƒë∆∞·ª£c mi·ªÖn tr·ª´: ${config.exemptUsers.length}`,
        threadID, messageID
    );
};

module.exports.getActionName = function(action) {
    const actions = {
        warn: '‚ö†Ô∏è C·∫£nh b√°o',
        kick: 'üö´ Kick',
        mute: 'üîá Mute'
    };
    return actions[action] || action;
};

module.exports.showHelp = async function(api, threadID, messageID) {
    return api.sendMessage(
        `üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh antispam:\n\n` +
        `‚Ä¢ antispam on - B·∫≠t h·ªá th·ªëng ch·ªëng spam\n` +
        `‚Ä¢ antispam off - T·∫Øt h·ªá th·ªëng ch·ªëng spam\n` +
        `‚Ä¢ antispam set [s·ªë_tin] [th·ªùi_gian(s)] [h√†nh_ƒë·ªông] - C√†i ƒë·∫∑t th√¥ng s·ªë\n` +
        `‚Ä¢ antispam exempt [add/remove] [userID] - Qu·∫£n l√Ω ng∆∞·ªùi d√πng mi·ªÖn tr·ª´\n` +
        `‚Ä¢ antispam admin exempt [on/off] - B·∫≠t/t·∫Øt mi·ªÖn tr·ª´ admin\n` +
        `‚Ä¢ antispam reset - Reset tr·∫°ng th√°i spam cho t·∫•t c·∫£ ng∆∞·ªùi d√πng\n` +
        `‚Ä¢ antispam reset [userID] - Reset tr·∫°ng th√°i spam cho ng∆∞·ªùi d√πng c·ª• th·ªÉ\n` +
        `‚Ä¢ antispam status - Xem tr·∫°ng th√°i hi·ªán t·∫°i\n\n` +
        `üõ†Ô∏è H√†nh ƒë·ªông c√≥ s·∫µn:\n` +
        `- warn: C·∫£nh b√°o ng∆∞·ªùi d√πng\n` +
        `- kick: ƒêu·ªïi ng∆∞·ªùi d√πng kh·ªèi nh√≥m\n` +
        `- mute: T·∫°m th·ªùi ch·∫∑n tin nh·∫Øn (1 ph√∫t)\n\n` +
        `üìå V√≠ d·ª•: antispam set 5 10 warn\n` +
        `‚û°Ô∏è C·∫£nh b√°o khi g·ª≠i 5 tin nh·∫Øn trong 10 gi√¢y`,
        threadID, messageID
    );
};
